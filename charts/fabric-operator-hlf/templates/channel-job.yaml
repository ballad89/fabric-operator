{{- if .Values.channels }}
{{ range $channel := .Values.channels }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ printf "%s-%s" $.Release.Name $channel.name }}
  labels:
    {{- include "fabric-operator-hlf.labels" $ | nindent 4 }}
  
spec:
  backoffLimit: 0
  template:
    metadata:
      labels:
        {{- include "fabric-operator-hlf.labels" $ | nindent 8 }}
    spec:
      restartPolicy: "Never"
      volumes:
        - name: {{ $channel.name }}-config
          configMap:
            name: {{ printf "%s-%s" $.Release.Name $channel.name }}
      {{- range $org := $channel.orgs }}
      {{- $rOrg := (include "fabric-operator-hlf.getOrg" (dict "Values" $.Values "orgName" $org.name )) | fromYaml }}
        - name: {{ $org.name}}-peer-connection-profile
          configMap:
            name: {{ ($rOrg.caConnectionProfileConfig | split "/")._1 }}
      {{- if ($org.orderers).enabled }}
      {{- $ordererOrg := (include "fabric-operator-hlf.getOrg" (dict "Values" $.Values "orgName" $org.name )) | fromYaml }}
      {{- $orderer := (include "fabric-operator-hlf.getOrderer" (dict "orderers" $ordererOrg.orderers "ordererName" $org.orderers.name )) | fromYaml  }}
      {{- range $num := until (int $orderer.clusterSize) }}
      {{- $num1 := add1 $num }}
        - name: {{ $ordererOrg.name }}-orderersnode{{ $num1 }}
          configMap:
            name: {{ $ordererOrg.name }}-orderersnode{{ $num1 }}-connection-profile
      {{- end }}
      {{- end }}
      {{- end }}
      containers:
        - name: create-channel-and-chaincode
          image: {{ $.Values.global.tools.image.repo }}:{{ $.Values.global.tools.image.tag }}
          imagePullPolicy: "IfNotPresent"
          env:
            - name: "TEMP_DIR"
              value: "{{ $.Values.global.tmpPath }}"
          command:
            - bash
            - -exc
            - |
              function channel_up() {
                set -x

                enroll_org_admins

                create_channel_msp
                create_genesis_block

                join_channel_orderers
                join_channel_peers
              }

              function deploy_chaincodes() {
                {{- range $chaincode := $channel.chaincodes }}
                deploy_chaincode {{ $chaincode.name }} {{ $chaincode.image }} {{ $chaincode.digest }} {{ $chaincode.sequence }} 
                {{- end }}
              }

              function deploy_chaincode() {
                local cc_name=$1
                local cc_image=$2
                local cc_digest=$3
                local cc_sequence=$4

                local temp_folder=$(mktemp -d)
                local cc_package=${cc_name}.tgz

                cd ${temp_folder} 

                cat << IMAGEJSON-EOF > image.json
              {
                  "name": "${cc_image}",
                  "digest": "${cc_digest}"
              }
              IMAGEJSON-EOF

                cat << METADATAJSON-EOF > metadata.json
              {
                    "type": "k8s",
                    "label": "${cc_name}"
              }
              METADATAJSON-EOF

                tar -czf code.tar.gz image.json

                tar -czf ${cc_package} metadata.json code.tar.gz


                {{- range $org := $channel.orgs }}
                {{- if ($org.peers).enabled }}
                {{- $peerOrg := (include "fabric-operator-hlf.getOrg" (dict "Values" $.Values "orgName" $org.name )) | fromYaml }}
                {{- range $peer := $peerOrg.peers }}


                export FABRIC_CFG_PATH=${TEMP_DIR}/{{ $org.name }}/config
                export CORE_PEER_ADDRESS={{ $peer.endpoint }}
                export CORE_PEER_LOCALMSPID={{ $peerOrg.mispID }}
                export CORE_PEER_TLS_ENABLED=true
                export CORE_PEER_MSPCONFIGPATH=${TEMP_DIR}/enrollments/{{ $org.name }}/users/{{ $org.adminCreds.username }}/msp
                export CORE_PEER_TLS_ROOTCERT_FILE=${TEMP_DIR}/channel-msp/peerOrganizations/{{ $org.name }}/msp/tlscacerts/tlsca-signcert.pem

                peer lifecycle chaincode install ${cc_package}
                export PACKAGE_ID=$(peer lifecycle chaincode calculatepackageid ${cc_package})
                {{- end }}
                {{- end }}

                {{- $oOrg := first ((include "fabric-operator-hlf.getChannelOrdererOrgs" (dict "orgs" $channel.orgs )) | fromYaml) }} 
                {{- $ordererOrg := (include "fabric-operator-hlf.getOrg" (dict "Values" $.Values "orgName" $oOrg.name )) | fromYaml }}
                {{- $orderer := (include "fabric-operator-hlf.getOrderer" (dict "orderers" $ordererOrg.orderers "ordererName" ($oOrg.orderers).name )) | fromYaml  }}
                {{- $num := (first (until (int ($orderer).clusterSize))) }}
                {{- $num1 := add1 $num }}

                peer lifecycle \
                  chaincode approveformyorg \
                  --channelID     {{ $channel.name }} \
                  --name          ${cc_name} \
                  --version       ${cc_sequence} \
                  --package-id    ${PACKAGE_ID} \
                  --sequence      ${cc_sequence} \
                  --orderer       {{ $.Release.Namespace }}-{{ $ordererOrg.name }}-orderersnode{{ $num1 }}-orderer.{{ $.Values.global.domain }}:443 \
                  --tls --cafile  {{ $.Values.global.tmpPath }}/channel-msp/ordererOrganizations/{{ $ordererOrg.name }}/orderers/{{ $orderer.name }}node{{ $num1 }}/tls/signcerts/tls-cert.pem \
                  --connTimeout   15s

                {{- end }}

                {{- $org := first ((include "fabric-operator-hlf.getChannelPeerOrgs" (dict "orgs" $channel.orgs )) | fromYaml) }} 
                {{- $peerOrg := (include "fabric-operator-hlf.getOrg" (dict "Values" $.Values "orgName" $org.name )) | fromYaml }}
                {{- $peer := (first (($peerOrg).peers)) }}

                export FABRIC_CFG_PATH=${TEMP_DIR}/{{ $org.name }}/config
                export CORE_PEER_ADDRESS={{ $peer.endpoint }}
                export CORE_PEER_LOCALMSPID={{ $peerOrg.mispID }}
                export CORE_PEER_TLS_ENABLED=true
                export CORE_PEER_MSPCONFIGPATH=${TEMP_DIR}/enrollments/{{ $org.name }}/users/{{ $org.adminCreds.username }}/msp
                export CORE_PEER_TLS_ROOTCERT_FILE=${TEMP_DIR}/channel-msp/peerOrganizations/{{ $org.name }}/msp/tlscacerts/tlsca-signcert.pem

                {{- $oOrg := first ((include "fabric-operator-hlf.getChannelOrdererOrgs" (dict "orgs" $channel.orgs )) | fromYaml) }} 
                {{- $ordererOrg := (include "fabric-operator-hlf.getOrg" (dict "Values" $.Values "orgName" $oOrg.name )) | fromYaml }}
                {{- $orderer := (include "fabric-operator-hlf.getOrderer" (dict "orderers" $ordererOrg.orderers "ordererName" $oOrg.ordererName )) | fromYaml  }}
                {{- $num := (first (until (int $orderer.clusterSize))) }}
                {{- $num1 := add1 $num }}

                peer lifecycle \
                  chaincode commit \
                  --channelID     {{ $channel.name }} \
                  --name          ${cc_name} \
                  --version       ${cc_sequence} \
                  --sequence      ${cc_sequence} \
                  --orderer       {{ $.Release.Namespace }}-{{ $ordererOrg.name }}-orderersnode{{ $num1 }}-orderer.{{ $.Values.global.domain }}:443 \
                  --tls --cafile  {{ $.Values.global.tmpPath }}/channel-msp/ordererOrganizations/{{ $ordererOrg.name }}/orderers/{{ $orderer.name }}node{{ $num1 }}/tls/signcerts/tls-cert.pem \
                  --connTimeout   15s
              }


              function enroll_org_admins() {
                  {{- range $org := $channel.orgs }}
                    enroll_org_admin type {{ $org.name }} {{ $org.adminCreds.username }} {{ $org.adminCreds.password }}
                  {{- end }}
              }

              function enroll_org_admin() {
                local type=$1
                local org=$2
                local username=$3
                local password=$4

                echo "Enrolling $type org admin $username"

                ENROLLMENTS_DIR=${TEMP_DIR}/enrollments
                ORG_ADMIN_DIR=${ENROLLMENTS_DIR}/${org}/users/${username}

                # skip the enrollment if the admin certificate is available.
                if [ -f "${ORG_ADMIN_DIR}/msp/keystore/key.pem" ]; then
                    echo "Found an existing admin enrollment at ${ORG_ADMIN_DIR}"
                    return
                fi

                # Retrieve the CA information from Kubernetes
                CA_NAME=${org}-ca
                CA_DIR=${TEMP_DIR}/cas/${CA_NAME}
                CONNECTION_PROFILE=${CA_DIR}/connection-profile.json

                # extract the CA enrollment URL and tls cert from the org connection profile
                CA_AUTH=${username}:${password}
                CA_ENDPOINT=$(jq -r .endpoints.api $CONNECTION_PROFILE)
                CA_HOST=$(echo ${CA_ENDPOINT} | cut -d/ -f3 | tr ':' '\n' | head -1)
                CA_PORT=$(echo ${CA_ENDPOINT} | cut -d/ -f3 | tr ':' '\n' | tail -1)
                CA_URL=https://${CA_AUTH}@${CA_HOST}:${CA_PORT}

                jq -r .tls.cert $CONNECTION_PROFILE | base64 -d >& $CA_DIR/tls-cert.pem

                # enroll the admin user
                FABRIC_CA_CLIENT_HOME=${ORG_ADMIN_DIR} fabric-ca-client enroll --url ${CA_URL} --tls.certfiles ${CA_DIR}/tls-cert.pem

                # Construct an msp config.yaml
                CA_CERT_NAME={{ $.Release.Namespace }}-${CA_NAME}-ca-$(echo {{ $.Values.global.domain }} | tr -s . -)-${CA_PORT}.pem

                create_msp_config_yaml ${CA_NAME} ${CA_CERT_NAME} ${ORG_ADMIN_DIR}/msp

                # private keys are hashed by name, but we only support one enrollment.
                # test-network examples refer to this as "server.key", which is incorrect.
                # This is the private key used to endorse transactions using the admin's
                # public key.
                mv ${ORG_ADMIN_DIR}/msp/keystore/*_sk ${ORG_ADMIN_DIR}/msp/keystore/key.pem


                # enroll the admin user at the TLS CA - used for the channel admin API
                FABRIC_CA_CLIENT_HOME=${ORG_ADMIN_DIR} \
                    fabric-ca-client enroll \
                    --url ${CA_URL} \
                    --tls.certfiles ${CA_DIR}/tls-cert.pem \
                    --mspdir ${ORG_ADMIN_DIR}/tls \
                    --caname tlsca

                mv ${ORG_ADMIN_DIR}/tls/keystore/*_sk ${ORG_ADMIN_DIR}/tls/keystore/key.pem
              }

              function create_msp_config_yaml() {
                local ca_name=$1
                local ca_cert_name=$2
                local msp_dir=$3
                echo "Creating msp config ${msp_dir}/config.yaml with cert ${ca_cert_name}"

                mkdir -p ${msp_dir} 

                cat << EOF > ${msp_dir}/config.yaml
              NodeOUs:
                Enable: true
                ClientOUIdentifier:
                  Certificate: cacerts/${ca_cert_name}
                  OrganizationalUnitIdentifier: client
                PeerOUIdentifier:
                  Certificate: cacerts/${ca_cert_name}
                  OrganizationalUnitIdentifier: peer
                AdminOUIdentifier:
                  Certificate: cacerts/${ca_cert_name}
                  OrganizationalUnitIdentifier: admin
                OrdererOUIdentifier:
                  Certificate: cacerts/${ca_cert_name}
                  OrganizationalUnitIdentifier: orderer
              EOF
              }


              function create_channel_msp() {
                  {{- range $org := $channel.orgs }}
                  {{- if $org.orderers.enabled }}
                  create_channel_org_msp orderer {{ $org.name }}
                  {{- $ordererOrg := (include "fabric-operator-hlf.getOrg" (dict "Values" $.Values "orgName" $org.name )) | fromYaml }}
                  {{- $orderer := (include "fabric-operator-hlf.getOrderer" (dict "orderers" $ordererOrg.orderers "ordererName" $org.orderers.name )) | fromYaml  }}
                  {{- range $num := until (int $orderer.clusterSize) }}
                  {{- $num1 := add1 $num }}
                  extract_orderer_tls_cert {{ $ordererOrg.name }} orderersnode{{ $num1 }}
                  {{- end }}
                  {{- end }}
                  {{- end }}

                  {{- range $org := $channel.orgs }}
                  {{- if $org.peers.enabled }}
                  create_channel_org_msp peer {{ $org.name }}
                  {{- end }}
                  {{- end }}
              }
                
              function create_channel_org_msp() {
                local type=$1
                local org=$2
                echo "Creating channel org $org MSP"

                CA_DIR=${TEMP_DIR}/cas/${org}-ca
                ORG_MSP_DIR=${TEMP_DIR}/channel-msp/${type}Organizations/${org}/msp

                mkdir -p ${ORG_MSP_DIR}/cacerts
                mkdir -p ${ORG_MSP_DIR}/tlscacerts

                jq -r .ca.signcerts ${CA_DIR}/connection-profile.json | base64 -d >& ${ORG_MSP_DIR}/cacerts/ca-signcert.pem
                jq -r .tlsca.signcerts ${CA_DIR}/connection-profile.json | base64 -d >& ${ORG_MSP_DIR}/tlscacerts/tlsca-signcert.pem

                create_msp_config_yaml ${org}-ca ca-signcert.pem ${ORG_MSP_DIR}
              }

              function extract_orderer_tls_cert() {
                local org=$1
                local orderer=$2

                echo "Extracting TLS cert for $org $orderer"

                ORDERER_NAME=${org}-${orderer}
                ORDERER_DIR=${TEMP_DIR}/channel-msp/ordererOrganizations/${org}/orderers/${ORDERER_NAME}
                ORDERER_TLS_DIR=${ORDERER_DIR}/tls
                CONNECTION_PROFILE=${ORDERER_DIR}/connection-profile.json

                mkdir -p $ORDERER_TLS_DIR/signcerts

                jq -r .tls.signcerts ${CONNECTION_PROFILE} \
                    | base64 -d \
                    >& $ORDERER_TLS_DIR/signcerts/tls-cert.pem
              }


              function create_genesis_block() {
                
                FABRIC_CFG_PATH=${TEMP_DIR}/config/ \
                    configtxgen \
                    -profile      TwoOrgsApplicationGenesis \
                    -channelID    {{ $channel.name }} \
                    -outputBlock  ${TEMP_DIR}/genesis_block.pb

                #  configtxgen -inspectBlock ${TEMP_DIR}/genesis_block.pb

              }

              function join_channel_orderers() {
                {{- range $org := $channel.orgs }}
                {{- if $org.orderers.enabled }}
                {{- $ordererOrg := (include "fabric-operator-hlf.getOrg" (dict "Values" $.Values "orgName" $org.name )) | fromYaml }}
                {{- $orderer := (include "fabric-operator-hlf.getOrderer" (dict "orderers" $ordererOrg.orderers "ordererName" $org.orderers.name )) | fromYaml  }}
                {{- range $num := until (int $orderer.clusterSize) }}
                {{- $num1 := add1 $num }}
                extract_orderer_tls_cert {{ $ordererOrg.name }} orderersnode{{ $num1 }}
                join_channel_orderer {{ $org.name }} orderersnode{{ $num1 }}
                {{- end }}
                {{- end }}
                {{- end }}

                # todo: readiness / liveiness equivalent for channel?  Needs a little bit to settle before peers can join.
                sleep 10
              }

                # Request from the channel ADMIN api that the orderer joins the target channel
              function join_channel_orderer() {
                local org=$1
                local orderer=$2

                # The client certificate presented in this case is the admin USER TLS enrollment key.  This is a stronger assertion
                # of identity than the Docker Compose network, which transmits the orderer NODE TLS key pair directly

                osnadmin channel join \
                    --orderer-address {{ $.Release.Namespace }}-${org}-${orderer}-admin.{{ $.Values.global.domain }} \
                    --ca-file         ${TEMP_DIR}/channel-msp/ordererOrganizations/${org}/orderers/${org}-${orderer}/tls/signcerts/tls-cert.pem \
                    --client-cert     ${TEMP_DIR}/enrollments/${org}/users/${org}admin/tls/signcerts/cert.pem \
                    --client-key      ${TEMP_DIR}/enrollments/${org}/users/${org}admin/tls/keystore/key.pem \
                    --channelID       {{ $channel.name }} \
                    --config-block    ${TEMP_DIR}/genesis_block.pb
              }

              function join_channel_peers() {
                {{- range $org := $channel.orgs }}
                {{- if $org.peers.enabled }}
                {{- $peerOrg := (include "fabric-operator-hlf.getOrg" (dict "Values" $.Values "orgName" $org.name )) | fromYaml }}
                {{- range $peer := $peerOrg.peers }}

                export FABRIC_CFG_PATH=${TEMP_DIR}/{{ $org.name }}/config
                export CORE_PEER_ADDRESS={{ $peer.endpoint }}
                export CORE_PEER_LOCALMSPID={{ $peerOrg.mispID }}
                export CORE_PEER_TLS_ENABLED=true
                export CORE_PEER_MSPCONFIGPATH=${TEMP_DIR}/enrollments/{{ $org.name }}/users/{{ $org.adminCreds.username }}/msp
                export CORE_PEER_TLS_ROOTCERT_FILE=${TEMP_DIR}/channel-msp/peerOrganizations/{{ $org.name }}/msp/tlscacerts/tlsca-signcert.pem

                peer channel join \
                    --blockpath ${TEMP_DIR}/genesis_block.pb
                {{- end }}
                {{- end }}
                {{- end }}
              }

              channel_up
              deploy_chaincodes
              sleep 300
          volumeMounts:
            - name: {{ $channel.name }}-config
              mountPath: {{ $.Values.global.tmpPath }}/config/configtx.yaml
              subPath: configtx.yaml
            {{- range $org := $channel.orgs }}
            - name: {{ $org.name}}-peer-connection-profile
              mountPath: {{ $.Values.global.tmpPath }}/cas/{{ $org.name}}-ca/connection-profile.json
              subPath: profile.json
            {{- if $org.peers.enabled}}
            - name: {{ $channel.name }}-config
              mountPath: {{ $.Values.global.tmpPath }}/{{ $org.name }}/config/core.yaml
              subPath: {{ $org.name }}-core.yaml
            {{- end }}
            {{- end }}
            {{- if $org.orderers.enabled }}
            {{- $ordererOrg := (include "fabric-operator-hlf.getOrg" (dict "Values" $.Values "orgName" $org.name )) | fromYaml }}
            - name: {{ $ordererOrg.name}}-orderer-connection-profile
              mountPath: {{ $.Values.global.tmpPath }}/cas/{{ $ordererOrg.name}}-ca/connection-profile.json
              subPath: profile.json
            {{- $orderer := (include "fabric-operator-hlf.getOrderer" (dict "orderers" $ordererOrg.orderers "ordererName" $org.orderers.name )) | fromYaml  }}
            {{- range $num := until (int $orderer.clusterSize) }}
            {{- $num1 := add1 $num }}
            - name:  {{ $ordererOrg.name }}-orderersnode{{ $num1 }}
              mountPath: {{ $.Values.global.tmpPath }}/channel-msp/ordererOrganizations/{{ $ordererOrg.name}}/orderers/{{ $ordererOrg.name }}-orderersnode{{ $num1 }}/connection-profile.json
              subPath: profile.json
            {{- end }}
            {{- end }}
{{- end }}
{{- end }}
